// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// ======= Internal failures =======
FUCHSIA_ERROR(INTERNAL,             1)

// ERR_NOT_SUPPORTED: The operation is not implemented, supported, or enabled.
FUCHSIA_ERROR(NOT_SUPPORTED,        2)

// ERR_NOT_FOUND: requested entity is not found
FUCHSIA_ERROR(NOT_FOUND,            3)

// ERR_NO_MEMORY: memory allocation failed
FUCHSIA_ERROR(NO_MEMORY,            4)

// ERR_NO_RESOURCES: allocation of resource other than memory failed (handle, id, etc)
FUCHSIA_ERROR(NO_RESOURCES,         5)

// ======= Parameter errors =======
// ERR_INVALID_ARGS: an argument is invalid, ex. null pointer
FUCHSIA_ERROR(INVALID_ARGS,        10)

// ERR_WRONG_TYPE: The subject of the operation is the wrong type to perform the operation.
// Example: Attempting a message_read on a thread handle.
FUCHSIA_ERROR(WRONG_TYPE,          54)

// ERR_BAD_SYSCALL: syscall number is invalid
FUCHSIA_ERROR(BAD_SYSCALL,         11)

// ERR_BAD_HANDLE: handle number does not refer to valid handle in your process
FUCHSIA_ERROR(BAD_HANDLE,          12)

// ERR_OUT_OF_RANGE: an argument is outside of the allowed range for that parameter
// the allowed range could change with the state of the system
FUCHSIA_ERROR(OUT_OF_RANGE,        13)

// ERR_NOT_ENOUGH_BUFFER: the buffer provided by the caller is too small for the requested operation
FUCHSIA_ERROR(NOT_ENOUGH_BUFFER,   14)

// ERR_ALREADY_EXISTS: attempting to create an entity that already exists at that name or id
FUCHSIA_ERROR(ALREADY_EXISTS,      15)

// ERR_ALREADY_BOUND: The operation failed because the named entity is already owned or controlled
// by another entity. The operation could succeed later if the current owner releases the entity.
FUCHSIA_ERROR(ALREADY_BOUND,       16)

// ======= Precondition or state errors =======
// ERR_BAD_STATE: operation failed because the current state of the object does not allow it,
// or a precondition of the operation is not satisfied
FUCHSIA_ERROR(BAD_STATE,           20)

// ERR_FLOW_CONTROL:
//   write cannot complete due to temporary buffer full
//   read cannot complete due to temporary no data to read
FUCHSIA_ERROR(FLOW_CONTROL,        21)    // XXX argue specific name later

// ERR_NOT_READY: subject of the operation is temporary unavailable
// expected to transition to operational or permanent failure
FUCHSIA_ERROR(NOT_READY,           22)

// ERR_TIMED_OUT: time out for the operation expired before the condition became true
FUCHSIA_ERROR(TIMED_OUT,           23)

// ERR_HANDLE_CLOSED: a handle being waited on was closed
FUCHSIA_ERROR(HANDLE_CLOSED,       24)

// TODO: Remove from userspace in favor of HANDLE_CLOSED and update kernel internal uses to more
// specific code(s).
FUCHSIA_ERROR(CANCELLED,           24)

// ERR_REMOTE_CLOSED: The operation failed because the remote end of the subject of the operation
// was closed.
FUCHSIA_ERROR(REMOTE_CLOSED,       25)

// ERR_NOT_AVAILABLE: object is owned or controlled by another entity
FUCHSIA_ERROR(NOT_AVAILABLE,       26)    // NEW

// ERR_SHOULD_WAIT: The operation cannot be performed currently but potentially could succeed if the
// caller waits for a prerequisite to be satisfied.
FUCHSIA_ERROR(SHOULD_WAIT,         27)

// ======= Permission check errors =======
FUCHSIA_ERROR(ACCESS_DENIED,       30)

// Input-output errors
FUCHSIA_ERROR(IO,                  40)
// TODO: Make more generic (ERR_IO_NACK?)
FUCHSIA_ERROR(I2C_NACK,            41)   // kernel only, remove or find better error
// TODO: Rename to something more generic like ERR_DATA_INTEGRITY
    // operation failed due to data being detected as corrupt or invalid
FUCHSIA_ERROR(CHECKSUM_FAIL,       42)   // RENAME to DATA_INTEGRITY

// Filesystem specific errors
FUCHSIA_ERROR(BAD_PATH,            50)
FUCHSIA_ERROR(NOT_DIR,             51)
FUCHSIA_ERROR(NOT_FILE,            52)
// TODO: Confusing name - is this the same as POSIX ELOOP?
FUCHSIA_ERROR(RECURSE_TOO_DEEP,    53)


// Garbage bin
//////////////////////////////////////
// TODO: Replace with INVALID_ARGS
FUCHSIA_ERROR(NOT_VALID,           90)

// TODO: Replace with ERR_INVALID_ARGS or ERR_NOT_ENOUGH_BUFFER
FUCHSIA_ERROR(TOO_BIG,             92)

// TODO: This appears to be used as a bool, does it need a distinct code?
FUCHSIA_ERROR(FAULT,               93)

// TODO: These all seem like state errors, should they just be ERR_BAD_STATE?
FUCHSIA_ERROR(ALREADY_STARTED,     95)
FUCHSIA_ERROR(NOT_BLOCKED,         96)
FUCHSIA_ERROR(THREAD_DETACHED,     97)

// TODO: This is a variant of ERR_BAD_STATE
FUCHSIA_ERROR(NOT_MOUNTED,         98)

FUCHSIA_ERROR(BUSY,                99)   // REMOVE - kernel/pcie should transition to ERR_NOT_READY/ERR_NOT_AVAILABLE
                                        // futex should return BAD_STATE
                                        // io port thing should return NOT_AVAILABLE
                                        // pcidevicedispatcher should return NOT_AVAILABLE
                                        // no ERR_BUSY from syscalls

// USER SPECIFIC
/////////////////////
FUCHSIA_ERROR(USER_BASE,        16384)
