#!/usr/bin/env bash

# Copyright 2016 The Fuchsia Authors
#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

function HELP {
    echo "help:"
    echo "-a <arch>           : arm32, arm64, or x86-64"
    echo "-b                  : build first"
    echo "-c                  : add item to kernel commandline"
    echo "-d                  : run with emulated disk"
    echo "-g                  : use graphical console"
    echo "-k                  : use KVM"
    echo "-m <memory in MB>   : default 512MB"
    echo "-n                  : run with emulated nic"
    echo "-N                  : run with emulated nic via tun/tap"
    echo "-o <dir>            : build directory"
    echo "-r                  : run release build"
    echo "-s <number of cpus> : number of cpus, 1 for uniprocessor, default is 4"
    echo "-v                  : use vnc based display"
    echo "-x <bootfs>         : add eXtra bootfs"
    echo "-h for help"
    echo "all arguments after -- are passed to qemu directly"
    exit 1
}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

ARCH=
AUDIO=0
BUILD=0
DISK=0
BUILDDIR=
GRAPHICS=0
DO_KVM=0
MEMSIZE=512
NET=0
RELEASE=0
VNC=0
SMP=4
INITRD=
CMDLINE=""

while getopts a:Abc:dgkm:nNo:rs:vx:h FLAG; do
    case $FLAG in
        a) ARCH=$OPTARG;;
        A) AUDIO=1;;
        b) BUILD=1;;
        c) CMDLINE+="$OPTARG ";;
        d) DISK=1;;
        g) GRAPHICS=1;;
        k) DO_KVM=1;;
        m) MEMSIZE=$OPTARG;;
        n) NET=1;;
        N) NET=2;;
        o) BUILDDIR=$OPTARG;;
        r) RELEASE=1;;
        s) SMP=$OPTARG;;
        v) VNC=1;;
        x) INITRD=$OPTARG;;
        h) HELP;;
        \?)
            echo unrecognized option
            HELP
    esac
done
shift $((OPTIND-1))

# arch argument is non optional
if [ "$ARCH" == "" ]; then
    echo must specify arch
    HELP
fi

if [ "$ARCH" = "x86-64" ]; then
    PROJECT=magenta-pc-x86-64
else
    PROJECT=magenta-qemu-$ARCH
fi

# build the project if asked for
if [ "$BUILD" -eq 1 ]; then
    if [ "$RELEASE" -eq 1 ]; then
        $DIR/make-release $PROJECT || exit 1
    else
        $DIR/make-parallel $PROJECT || exit 1
    fi
fi

# append the release path if requested
if [ "$RELEASE" -eq 1 ]; then
    PROJECT=$PROJECT-release
fi

if [ "$BUILDDIR" == "" ]; then
  BUILDDIR="$(dirname "$DIR")/build-$PROJECT"
fi

# construct the args for qemu
ARGS=" -m $MEMSIZE"
if [ "$VNC" -eq 1 ]; then
    ARGS+=" -vnc :0"
fi

if [ "$GRAPHICS" -eq 0 ]; then
    ARGS+=" -nographic"
else
    ARGS+=" -serial stdio"
    if [ "$ARCH" = "x86-64" ]; then
        # Enable Bochs VBE device, which Magenta has a device for
        ARGS+=" -vga std"
    else
        ARGS+=" -device virtio-gpu-device"
    fi
fi

if [ "$DISK" -eq 1 ]; then
    if [ "$ARCH" == "x86-64" ]; then
        # ahci
        ARGS+=" -drive file=blk.bin,if=none,id=mydisk -device ich9-ahci,id=ahci -device ide-drive,drive=mydisk,bus=ahci.0"
    else
        # virtio based block device
        ARGS+=" -drive if=none,file=blk.bin,id=blk,format=raw -device virtio-blk-device,drive=blk"
    fi
fi

if [ "$NET" -eq 1 ]; then
    # virtio based network interface
    if [ "$ARCH" == "x86-64" ]; then
        ARGS+=" -netdev type=user,hostname=qemu,id=net0 -device virtio-net-pci,netdev=net0"
    else
        ARGS+=" -netdev user,id=vmnic,hostname=qemu -device virtio-net-device,netdev=vmnic"
    fi
fi

if [ "$NET" -eq 2 ]; then
    ARGS+=" -netdev type=tap,ifname=qemu,script=no,id=net0"
    if [ "$ARCH" == "x86-64" ]; then
        ARGS+=" -device e1000,netdev=net0"
    else
        ARGS+=" -device virtio-net-device,netdev=net0"
    fi
fi


if [ "$AUDIO" -ne 0 ]; then
    ARGS+=" -soundhw hda"
    export QEMU_AUDIO_DRV=none
fi

if [ "$SMP" -ne 1 ]; then
    ARGS+=" -smp $SMP"
fi

case $ARCH in
    arm32)
        QEMU=qemu-system-arm
        ARGS+=" -machine virt -cpu cortex-a15 -kernel $BUILDDIR/magenta.elf"
        ;;
    arm64)
        QEMU=qemu-system-aarch64
        ARGS+=" -machine virt -cpu cortex-a53 -kernel $BUILDDIR/magenta.elf"
        ;;
    x86-64)
        QEMU=qemu-system-x86_64
        ARGS+=" -machine q35 -kernel $BUILDDIR/magenta.bin"
        if [ $DO_KVM -ne 0 ]; then
          ARGS+=" -enable-kvm -cpu host"
        else
          ARGS+=" -cpu Haswell,+smap"
        fi
        ;;
    *)
        echo unsupported arch
        HELP
        ;;
esac

# ramdisk image
if [ "$INITRD" != "" ]; then
    ARGS+=" -initrd $INITRD"
fi

# run qemu
echo $QEMU $ARGS -append "$CMDLINE" $@
$QEMU $ARGS -append "$CMDLINE" $@

